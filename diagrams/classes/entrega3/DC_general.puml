@startuml
title Diagrama General


class Ciudad{
    - nombre : String
    - pistas : [Pista]
    + {static} registroCiudad(nombre)
    + {static} registroCiudadConPistas(nombre, pistas[Pista])
    + visitar(lugar, grado, cronometro, dado) : Pista
    + agregarPista(pista)
}

class Comisaria {
    - ladronesBuscados[Ladron]
    + {static} inicializarComisaria(ladrones[Ladron])
    + buscarLadrones(sospechoso) : [Ladron]
}

class Cronometro {
    - tiempo : Tiempo
    + {static} inicializar(tiempo)
    + calcularTiempoDeViaje(distancia, tiempoDeViaje)
    + calcularTiempoDeCuchillazo(cantidadVecesAcuchillado)
    + calcularTiempoDurmiendo(tiempoDeDescanso)
    + calcularTiempoEnObtenerLaPista(cantidadDeVisitas)
    + calcularTiempoDeBalazo(tiempoDeHeridaDeBala)
}

class Partida{
    - dado : Random
    - inicializadorDeArchivos : InicializadorDeArchivos
    - policia : Policia
    - comisaria : Comisaria
    - ladron : Ladron
    - tiempo : Tiempo
    - mapa : Mapa
    - ladrones[Ladron]
    - ciudades{String, Ciudad}
    - pistasDelLadron[String]
    - objetosRobados[ObjetoRobado]
    - cantidadPaisesVisitados : int
    - ciudadActual : Ciudad
    - ciudadSiguiente : Ciudad
    - cargarMapa()
    - cargarDescripcionLadron()
    - cargarPistasLugares()
    - cargarLadrones() : [Ladron]
    - cargarObjetosRobados()
    - seleccionarObjetoRobado(grado) : ObjetoRobado
    - inicializarPolicia(objetoRobado, grado) : Policia
    - seleccionarLadron(objetoRobado) : Ladron
    + {static} crearPartida(inicializadorDeArchivos, dado)
    + pedirDatos()
    + asignarGradoDePolicia(cantidadDeArrestos) : GradoDePolicia
    + buscarLadrones() : [Ladron]
    + viajar(ciudadSeleccionada)
    + entrarEdificio(lugarSeleccionado) : Pista
    + acuchillar()
    + nuevoCaso(cantidadDeArrestos)
    + anotarCualidad(atributo)
    + atrapar() : boolean
    + hora() : String
}


class Ladron{
    - nombre : String
    - cualidades : [Cualidad]
    - objetoRobado : ObjetoRobado
    + {static} registro(nombre, cualidades[Cualidad])
    + asignarObjetoRobado(objeto)
    + esIgual(sospechoso) : int
    + chequearPistas(pistasDelLadron[String], descripcion, nombreDelLadron)
    '/+ acuchillar(Policia) : int/'
}



class Policia{
    - grado : GradoDePolicia
    - sospechoso : Sospechoso
    - ciudadActual : Ciudad
    - cantidadDeVecesAcuchillado : int
    - ordenDeArresto : OrdenDeArresto
    - emitirOrden() : OrdenDeArresto
    + {static} registroPolicia(sospechoso, grado, ciudadInicial)
    + anotarCualidad(cualidad)
    + entrarEdificio(lugar, cronometro, dado) : Pista
    + viajar(ciudadSeleccionada, mapa, cronometro)
    + recibirCuchillazo()
    + recibirHeridaDeBala()
    + dormir(cronometro)
    + buscarLadrones(comisaria) : [Ladron]
    + atrapar(ladron) : boolean
}

class Mapa{
    - posicionesDeCiudades{Ciudad, Posicion}
    - factorAKm : int
    + {static} crear()
    + calcularDistancia(ciudadSeleccionada, ciudadActual) : int
    + agregarCiudad(Ciudad, latitud, longitud)
}

abstract class GradoDePolicia{
    # tiempoDeViaje : int
    # tiempoDeDescanso : int
    # tiempoDeHeridaDeBala
    # dificultadMasFrecuente : Dificultad
    # dificultadMenosFrecuente : Dificultad
    # rarezaMasFrecuente : String
    # rarezaMenosFrecuente : String
    + calcularTiempoDeViaje(distancia, cronometro)
    + calcularTiempoDeBalazo(cronometro)
    + calcularTiempoDurmiendo(cronometro)
    + buscarPista(pistas[Pista], nombreLugar, dado) : Pista
    + elegirObjeto(objetosRobados[ObjetoRobado], random) : ObjetoRobado
}


class Sospechoso{
    - cualidades : [Cualidad]
    + {static} registro()
    + anotarCualidad(cualidad)
    + esIgual(cualidades[Cualidad]) : int
}

class Lugar{
    - nombre : String
    - obtenerPista(grado, pistas[Pista], dado) : Pista
    + {static} crear(nombre)
    + visitar(grado, pistas[Pista], cronometro, dado) : Pista
}

class Pista{
    - dificultad : Dificultad
    - descripcion : String
    - lugarCorrespondiente : String
    - cantDeVisitas : int
    - calcularTiempoEnObtenerLaPista(cronometro)
    + {static} inicializarPista(dificultad, descripcion, lugar)
    + esPista(dificultad, nombreLugar) : boolean
    + obtenerPista(cronometro) : Pista
    + descripcion() : String
}

interface ObjetoRobado{
	+ rareza() : String
	+ cantidadDePaises() : int
	+ verificarLimitePaises(cantPaisesVisitados) : Ciudad
    + crearPoliciaConCiudadInicial(grado) : Policia
}

class Tiempo{
    - hora : int
    - tiempoLimite : int
    - tiempoInicio : LocalDateTime
    - formato : String
    - finalizado() : boolean
    + {static} inicializar()
    + agregarTiempo(tiempoDeLaAccion)
    + debeDormir(tiempoDeDescanso)
    + tiempoTranscurrido() : float
    + tiempoFormateado() : String
}

interface OrdenDeArresto{
    + emitida() : boolean
    + emitir(ladrones [Ladron]) : OrdenDeArresto
}


Partida "1" --o "1..*" Ladron
Partida "1" --o "1..*" Sospechoso
Partida"1" --* "1"Policia
Partida --o Tiempo
Policia --* GradoDePolicia
Policia --> Mapa
Partida "1" --* "1..*" Ciudad
Policia --> Ciudad
Ciudad "1" --> "1..5"Lugar
Lugar "1" --o "1..*" Pista

Policia ..> OrdenDeArresto
Ladron --* "1..*" ObjetoRobado
Partida --> Comisaria
Cronometro ..> Tiempo
Partida --> Cronometro


@enduml