@startuml
title Dependencias de las clases "Partida", "Cron√≥metro", "Mapa", "Ruta Ladron" y "Comisaria"

class Partida{
    - dado : Random
    - inicializadorDeArchivos : InicializadorDeArchivos
    + {static} crearPartida(inicializadorDeArchivos, dado)
    + buscarLadrones() : [Ladron]
    + viajar(ciudadSeleccionada)
    + entrarEdificio(lugarSeleccionado) : Pista
    + nuevoCaso(cantidadDeArrestos)
    + anotarCualidad(atributo)
    + hora() : String
}
together {
    class Comisaria {
        + {static} Comisaria(ladrones[Ladron])
        + buscarLadrones(sospechoso) : [Ladron]
    }
    class Ladron{
        - nombre : String
        - cualidades : [Cualidad]
        + {static} registro(nombre, cualidades[Cualidad])
        + asignarObjetoRobado(objeto)
        + esIgual(sospechoso) : int
        + chequearPistas(pistasLadron[String], descripcion, nombreDelLadron)
    }
    interface ObjetoRobado{
        + rareza() : String
        + cantidadDePaises() : int
        + verificarLimitePaises(cantPaisesVisitados) : Ciudad
        + crearPoliciaConCiudadInicial(grado) : Policia
        + rutaLadron(nomCiudades[String], ciudades[Ciudad], dado, rutaLadron) : [Ciudad]
    }

}
together {
class Sospechoso{
        - cualidades : [Cualidad]
        + {static} registro()
        + anotarCualidad(cualidad)
        + esIgual(cualidades[Cualidad]) : int
    }
    class Policia{
        - cantidadDeVecesAcuchillado : int
        - grado : GradoDePolicia
        - ordenDeArresto : OrdenDeArresto;
        + {static} registroPolicia(sospechoso, grado)
        + anotarCualidad(cualidad)
        + comprobarVictoria(rutaLadron)
        + entrarEdificio(lugar, cronometro, dado) : Pista
        + viajar(ciudadSeleccionada, mapa, cronometro)
        + recibirCuchillazo()
        + recibirHeridaDeBala()
        + dormir(cronometro)
    }

}
class Tiempo{
    - hora : int
    - tiempoLimite : int
    - tiempoInicio : LocalDateTime
    + {static} inicializar()
    + agregarTiempo(tiempoDeLaAccion)
    + debeDormir(tiempoDeDescanso)
    + tiempoTranscurrido() : float
    + tiempoFormateado() : String
}
class Cronometro {
    + {static} inicializar(tiempo)
    + calcularTiempoDeViaje(distancia, tiempoDeViaje)
    + calcularTiempoDeCuchillazo(cantidadVecesAcuchillado)
    + calcularTiempoDurmiendo(tiempoDeDescanso)
    + calcularTiempoEnObtenerLaPista(cantidadDeVisitas)
    + calcularTiempoDeBalazo(tiempoDeHeridaDeBala)
}

class RutaLadron{
    - rutaLadron : [Ciudad]
    - destinosEquivocados : [String]
    - ciudadActual : Ciudad
    - ciudadSiguiente : Ciudad
    + {static} RutaLadron()
    + establecerRuta(objetoRobado, nombresDeCiudades[String], ciudades[Ciudad], dado) : [Ciudad]
    + verificarSiEligioElDestinoCorrecto(ciudades[Ciudad], ciudadSeleccionada)
    + verificarDestinos(destinos[String]], dado) : [String]
}
class Ciudad{
    - nombre : String
    - pistas : [Pista]
    - lugares : [String]
    - destinos : [String]
    + {static} registroCiudad(nombre)
    + {static} registroCiudadConPistas(nombre, pistas[Pista])
    + visitar(lugar, grado, cronometro, dado) : Pista
    + agregarPista(pista)
    + agregarLugar(lugar)
    + setearPistasFalsas()
}
class Mapa{
    - posicionesDeCiudades{Ciudad, Posicion}
    - factorAKm : int
    + {static} crear()
    + calcularDistancia(ciudadSeleccionada, ciudadActual) : int
    + agregarCiudad(Ciudad, latitud, longitud)
}
/' Parte de arriba '/
Sospechoso <- Policia
Policia .> Mapa
Sospechoso "1..*" --o "1" Partida
Policia "1" --* "1"Partida
Mapa <-- Partida

/' Lado Izquierdo y abajo '/
Tiempo "1" -* "1" Partida
Partida --> Cronometro
Tiempo <. Cronometro

/' Lado derecho y abajo'/
Partida "1" *- "1..*" Ciudad
Mapa "1" o- "1..*" Ciudad
Partida "1" *-- "1" RutaLadron
Ciudad "1..*" --o "1" RutaLadron

/' Segundo nivel inferior '/
Partida ---> Comisaria
Partida "1" o--- "1..*" Ladron
Partida "1" o--- "1..*" ObjetoRobado
Comisaria -> "1..*" Ladron
Ladron "1" o- "1" ObjetoRobado




@enduml